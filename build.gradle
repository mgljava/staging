buildscript {
    ext {
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"
apply plugin: 'checkstyle'


group = 'com.github.mgljava'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}


dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.0'
    annotationProcessor 'org.projectlombok:lombok:1.18.0'
    implementation('org.springframework.boot:spring-boot-starter')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.2.0"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.2.0"
    testImplementation 'org.mockito:mockito-junit-jupiter:2.21.0'
}

copy {
    from "./config/githooks/"
    into "./.git/hooks/"
    fileMode 0755
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    exclude: [
                            '**/StagingApplication.class'
                    ]
            )
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
                    '**.StagingApplication'
            ]

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
    dependsOn(jacocoTestReport)
}

check.dependsOn jacocoTestCoverageVerification

checkstyle {
    toolVersion '8.1'
    ignoreFailures = false
    configFile file("$project.rootDir/config/checkstyle/checkstyle.xml")
    sourceSets = [sourceSets.main]

    checkstyleMain {
        source = 'src/main/java'
    }
}

